# -*- coding: utf-8 -*-
"""pendulum_a2c_online.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11NsMuJ97xJ1s2IJ5yuBKvvePEQNzOBmZ
"""

import os
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

import numpy as np
import torch
from torch import nn
from torch.nn import functional as F
import matplotlib.pyplot as plt
from torch.utils.tensorboard import SummaryWriter
from tqdm import tqdm

from Environment import AstEnv
from DataPreprocessing import DataPreProcessing


def mish(input):
    return input * torch.tanh(F.softplus(input))

class Mish(nn.Module):
    def __init__(self): super().__init__()
    def forward(self, input): return mish(input)

# helper function to convert numpy arrays to tensors
def t(x):
    x = np.array(x) if not isinstance(x, np.ndarray) else x
    return torch.from_numpy(x).float()

class Actor(nn.Module):
    def __init__(self, state_dim, n_actions, hidden_size=256, activation=nn.Tanh):
        super().__init__()
        self.n_actions = n_actions
        self.model = nn.Sequential(
            nn.Linear(state_dim, hidden_size),
            activation(),
            nn.Linear(hidden_size, hidden_size),
            activation(),
            nn.Linear(hidden_size, n_actions)
        )

        logstds_param = nn.Parameter(torch.full((n_actions,), 0.1))
        self.register_parameter("logstds", logstds_param)

    def forward(self, X):
        means = self.model(X)
        stds = torch.clamp(self.logstds.exp(), 1e-3, 50)

        return torch.distributions.Normal(means, stds)

## Critic module
class Critic(nn.Module):
    def __init__(self, state_dim, hidden_size=256, activation=nn.Tanh):
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(state_dim, hidden_size),
            activation(),
            nn.Linear(hidden_size, hidden_size),
            activation(),
            nn.Linear(hidden_size, 1),
        )

    def forward(self, X):
        return self.model(X)

def discounted_rewards(rewards, dones, gamma):
    ret = 0
    discounted = []
    for reward, done in zip(rewards[::-1], dones[::-1]):
        ret = reward + ret * gamma * (1-done)
        discounted.append(ret)

    return discounted[::-1]

def process_memory(memory, gamma=0.99, discount_rewards=True):
    actions = []
    states = []
    next_states = []
    rewards = []
    dones = []

    for action, reward, state, next_state, done in memory:
        actions.append(action)
        rewards.append(reward)
        states.append(state)
        next_states.append(next_state)
        dones.append(done)

    if discount_rewards:
        if False and dones[-1] == 0:
            rewards = discounted_rewards(rewards + [last_value], dones + [0], gamma)[:-1]
        else:
            rewards = discounted_rewards(rewards, dones, gamma)

    actions = t(actions).view(-1, 1)
    states = t(states)
    next_states = t(next_states)
    rewards = t(rewards).view(-1, 1)
    dones = t(dones).view(-1, 1)
    return actions, rewards, states, next_states, dones

def clip_grad_norm_(module, max_grad_norm):
    nn.utils.clip_grad_norm_([p for g in module.param_groups for p in g["params"]], max_grad_norm)

class A2CLearner():
    def __init__(self, actor, critic, gamma=0.9, entropy_beta=0,
                 actor_lr=4e-4, critic_lr=4e-3, max_grad_norm=0.5):
        self.gamma = gamma
        self.max_grad_norm = max_grad_norm
        self.actor = actor
        self.critic = critic
        self.entropy_beta = entropy_beta
        self.actor_optim = torch.optim.Adam(actor.parameters(), lr=actor_lr)
        self.critic_optim = torch.optim.Adam(critic.parameters(), lr=critic_lr)

    def learn(self, memory, steps, discount_rewards=True):
        actions, rewards, states, next_states, dones = process_memory(memory, self.gamma, discount_rewards)

        if not discount_rewards:
            td_target = rewards
        else:
            td_target = rewards + self.gamma*critic(next_states)*(1-dones)
        value = critic(states)
        advantage = td_target - value

        # actor
        norm_dists = self.actor(states)
        actions = actions.reshape(-1, 4)
        logs_probs = norm_dists.log_prob(actions)
        entropy = norm_dists.entropy().mean()

        actor_loss = (-logs_probs*advantage.detach()).mean() - entropy*self.entropy_beta
        self.actor_optim.zero_grad()
        actor_loss.backward()

        clip_grad_norm_(self.actor_optim, self.max_grad_norm)
        #writer.add_histogram("gradients/actor",
        #                     torch.cat([p.grad.view(-1) for p in self.actor.parameters()]), global_step=steps)
        #writer.add_histogram("parameters/actor",
        #                     torch.cat([p.data.view(-1) for p in self.actor.parameters()]), global_step=steps)
        self.actor_optim.step()

        # critic
        critic_loss = F.mse_loss(td_target, value)
        self.critic_optim.zero_grad()
        critic_loss.backward()
        clip_grad_norm_(self.critic_optim, self.max_grad_norm)
        #writer.add_histogram("gradients/critic",
        #                     torch.cat([p.grad.view(-1) for p in self.critic.parameters()]), global_step=steps)
        #writer.add_histogram("parameters/critic",
        #                     torch.cat([p.data.view(-1) for p in self.critic.parameters()]), global_step=steps)
        self.critic_optim.step()

        # reports
        #writer.add_scalar("losses/log_probs", -logs_probs.mean(), global_step=steps)
        #writer.add_scalar("losses/entropy", entropy, global_step=steps)
        #writer.add_scalar("losses/entropy_beta", self.entropy_beta, global_step=steps)
        #writer.add_scalar("losses/actor", actor_loss, global_step=steps)
        #writer.add_scalar("losses/advantage", advantage.mean(), global_step=steps)
        #writer.add_scalar("losses/critic", critic_loss, global_step=steps)

class Runner():
    def __init__(self, env:AstEnv):
        self.env = env
        self.state = None
        self.done = True
        self.passed = False
        self.all_done = False
        self.steps = 0
        self.episode_reward = 0
        self.episode_rewards = []

    def reset(self, passed):
        self.episode_reward = 0
        self.done = False
        self.passed = False
        self.state = self.env.reset(passed)

    def run(self, max_steps, data_num, et, reward_lists, memory=None):
        reward_list = reward_lists[0]
        max_reward_list = reward_lists[1]

        action_space_low = 0.01
        action_space_high = 0.2 #0.15

        if not memory: memory = []

        max_reward = -9e+8
        show_bool = True
        for k in range(max_steps):
            if self.all_done:
                print(" SUCCESSED in CURRENT ENV")
                print(" episode:", len(self.episode_rewards), ", episode reward:", self.episode_reward)
                self.env.show()
                break

            if self.done:
                self.reset(self.passed)

            dists = actor(t(self.state))
            actions = dists.sample().detach().data.numpy()
            actions_clipped = np.clip(actions, [0, 0, 0, action_space_low], [1, 1, 1, action_space_high])

            next_state, reward, self.done, info = self.env.step(actions_clipped)
            self.passed = info[0]
            self.all_done = info[1]
            memory.append((actions, reward, self.state, next_state, self.done))

            self.state = next_state
            self.steps += 1
            #self.episode_reward += reward
            #self.episode_reward += (reward - 80 - k*2)
            self.episode_reward = reward

            max_reward = max(max_reward, reward)
            if k%4 == 0:
                print("Reward :", max_reward)
                max_reward = -9e+8
                show_bool = True

            if reward > 45 and show_bool:
                print("show_passed : "+str(reward)+" | obs_lc_num : "+str(self.env.obs_lc_num))
                self.env.show(str(data_num)+"_"+str(et)+"_"+str(k)+"_"+str(int(reward*100)/100)+"_"+"0306ast.png")
                plt.close()
                show_bool = False

            if self.done:
                #print(actions_clipped)
                if self.passed:
                    print("show_passed : "+str(reward)+" | obs_lc_num : "+str(self.env.obs_lc_num))
                    self.env.show()
                    plt.close()
                    break    
                self.episode_rewards.append(self.episode_reward)
                max_reward_list.append(max_reward)
                if len(self.episode_rewards) % 10 == 0:
                    print(" episode:", len(self.episode_rewards), ", episode reward:", self.episode_reward)
                #writer.add_scalar("episode_reward", self.episode_reward, global_step=self.steps)

        reward_list = reward_list + self.episode_rewards
        return memory, reward, (reward_list, max_reward_list)



l_max = 8
merge_num = 3
N_set = (40, 20)
lightcurve_unit_len = 100
data_path = "C:/Users/dlgkr/OneDrive/Desktop/code/astronomy/asteroid_AI/data/data_total.npz"
model_save_path = "C:/Users/dlgkr/OneDrive/Desktop/code/astronomy/asteroid_AI/checkpoints/"

dataPP = DataPreProcessing(data_path=data_path)
dataPP.X_total = torch.concat((dataPP.X_total[:, :100], dataPP.X_total[:, -9:]), dim=-1)
dataPP.Y_total = dataPP.Y_total[:, 0:(l_max+1)**2]
dataPP.coef2R(dataPP.Y_total, l_max=l_max, N_set=N_set)
dataPP.merge(merge_num=merge_num, ast_repeat_num=10, lc_len=lightcurve_unit_len, dupl_ratio=0.01)
dataPP.X_total = dataPP.X_total.numpy()
dataPP.Y_total = dataPP.Y_total.numpy()
X_total, _, y_total, _ = dataPP.train_test_split(trainset_ratio=0.1)
X_total = X_total[:500, :]


reward_list = []
max_reward_list = []

checkpoint_load = False
checkpoint_epoch = _

for i in tqdm(range(X_total.shape[0])):
    #obs_lc_num = np.random.randint(merge_num)
    #obs_lc_time = np.argmax(X_total[i, lightcurve_unit_len*(obs_lc_num):lightcurve_unit_len*(obs_lc_num+1)])
    env = AstEnv(X_total[i, :-9*merge_num], X_total[i, -9*merge_num:], merge_num, N_set, lightcurve_unit_len)
    if env.ell_err:
        continue
    state_dim = (env.Ntheta*env.Nphi)//(2*env.ast_obs_unit_step) + 2*(lightcurve_unit_len//(4*env.lc_obs_unit_step))
    n_actions = 4

    #writer = SummaryWriter("runs/mish_activation")

    # config
    if i==0:
        actor = Actor(state_dim, n_actions, activation=nn.Tanh)
        critic = Critic(state_dim, activation=nn.Tanh)
        learner = A2CLearner(actor, critic)

        if checkpoint_load:
            actor_checkpoint = torch.load(model_save_path+"actor_"+str(checkpoint_epoch)+".pt")
            actor.load_state_dict(actor_checkpoint['model_state_dict'])
            learner.actor_optim.load_state_dict(actor_checkpoint['optimizer_state_dict'])
            critic_checkpoint = torch.load(model_save_path+"critic_"+str(checkpoint_epoch)+".pt")
            critic.load_state_dict(critic_checkpoint['model_state_dict'])
            learner.critic_optim.load_state_dict(critic_checkpoint['optimizer_state_dict'])


    runner = Runner(env)

    steps_on_memory = 50 
    total_steps = 10

    for j in range(total_steps):
        memory, last_reward, reward_lists = runner.run(steps_on_memory, i, j, (reward_list, max_reward_list))
        reward_list = reward_lists[0]
        max_reward_list = reward_lists[1]
        learner.learn(memory, runner.steps, discount_rewards=True)
        
        if last_reward < -5e+2:
            break
        
        if runner.passed:
            if env.obs_lc_num != 2:
                env.obs_lc_num = env.obs_lc_num + 1
            else:
                if runner.all_done:
                    break
                else:
                    env.obs_lc_num = 0

    # Chekcpoint
    if i%30 == 0:
        torch.save({
            'epoch':i,
            'model_state_dict':actor.state_dict(),
            'optimizer_state_dict':learner.actor_optim.state_dict()
        }, model_save_path+"actor_"+str(i)+".pt")

        torch.save({
            'epoch':i,
            'model_state_dict':critic.state_dict(),
            'optimizer_state_dict':learner.critic_optim.state_dict()
        }, model_save_path+"critic_"+str(i)+".pt")

        with open(model_save_path+"reward_list.txt", 'a+') as file:
            file.write('\n'.join(reward_list))

        with open(model_save_path+"max_reward_list.txt", 'a+') as file:
            file.write('\n'.join(max_reward_list))
    
